// Generated by CoffeeScript 2.1.1
(function() {
  // bitcoin live feed
  var bitcoinSocket, nanoSocket, showBlock, showTx;

  bitcoinSocket = new WebSocket("wss://ws.blockchain.info/inv");

  bitcoinSocket.onopen = function() {
    bitcoinSocket.send(JSON.stringify({
      op: 'unconfirmed_sub'
    }));
    return bitcoinSocket.send(JSON.stringify({
      op: 'blocks_sub'
    }));
  };

  bitcoinSocket.onmessage = function({data}) {
    var fee, i, input, j, len, len1, output, ref, ref1, valIn, valOut;
    data = JSON.parse(data);
    if (data.op === 'utx') {
      fee = 0;
      valOut = 0;
      valIn = 0;
      ref = data.x.inputs;
      for (i = 0, len = ref.length; i < len; i++) {
        input = ref[i];
        valIn += input.prev_out.value / 100000000;
      }
      ref1 = data.x.out;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        output = ref1[j];
        valOut += output.value / 100000000;
      }
      fee = Math.max(valIn - valOut, 0);
      return showTx('btc', {
        amount: valOut,
        fee,
        hash: data.x.hash
      });
    } else {
      return showBlock('btc', data.x);
    }
  };

  // nano live feed
  nanoSocket = new WebSocket("wss://www.nanode.co/socket.io/?EIO=3&transport=websocket");

  nanoSocket.onopen = function() {
    return nanoSocket.send('2');
  };

  nanoSocket.onmessage = function({data}) {
    var payload, type;
    data = data.match(/^\d+(\[.+?)$/);
    if (data) {
      [type, payload] = JSON.parse(data[1]);
      if (type === 'block') {
        return showTx('nano', {
          amount: payload.amount / Math.pow(10, 30),
          fee: 0,
          hash: payload.hash
        });
      }
    }
  };

  // ether live feed
  //etherSocket = new WebSocket "ws://ethersocket.herokuapp.com"
  //etherSocket.onmessage = ({data}) ->
  //  data = JSON.parse data
  //  if data.type is 'tx'
  //    showTx 'ethereum', {amount: data.ethers, fee: data.fee, hash: data.hash}
  //  else
  //    showBlock 'ethereum', data
  showTx = function(network, tx) {
    return console.log('tx', network, tx);
  };

  showBlock = function(network, block) {
    return console.log('block', network, block);
  };

}).call(this);

//# sourceMappingURL=main.js.map
