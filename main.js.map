{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "",
  "sources": [
    "main.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,aAAA,EAAA,UAAA,EAAA,WAAA,EAAA,KAAA,EAAA,cAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,MAAA,EAAA;;AAAA,UAAA,GAAa,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB;;AACb,MAAA,GAAS,CAAA,EADT;;;AAIA,YAAA,GAAe,QAAA,CAAA,CAAA;AACb,MAAA;EAAA,WAAA,GAAc;EACd,CAAC,CAAC,GAAF,CAAM,WAAA,GAAc,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,WAArB,CAAA,CAApB,EAAwD,QAAA,CAAC,IAAD,CAAA;AACtD,QAAA,QAAA,EAAA,KAAA,EAAA;IAAA,IAAG,IAAH;AACE;MAAA,KAAA,gBAAA;;QACE,QAAA,GAAW,QAAQ,CAAC,WAAT,CAAA;QACX,MAAO,CAAA,QAAA,CAAP,GAAmB,IAAI,CAAC,KAAL,CAAW,CAAA,GAAE,KAAF,GAAQ,GAAnB,CAAA,GAAwB;qBAC3C,CAAA,CAAE,GAAA,GAAI,QAAJ,GAAa,SAAf,CAAyB,CAAC,IAA1B,CAA+B,MAAO,CAAA,QAAA,CAAtC;MAHF,CAAA;qBADF;;EADsD,CAAxD;SAOA,UAAA,CAAW,YAAX,EAAyB,EAAA,GAAG,IAA5B;AATa,EAJf;;;AAgBA,cAAA,GAAiB,IAAI,SAAJ,CAAc,gEAAd;;AAEjB,cAAc,CAAC,MAAf,GAAwB,QAAA,CAAA,CAAA;EACtB,cAAc,CAAC,IAAf,CAAoB,QAApB;EACA,cAAc,CAAC,IAAf,CAAoB,GAApB;EACA,cAAc,CAAC,IAAf,CAAoB,yBAApB;EACA,cAAc,CAAC,IAAf,CAAoB,wBAApB;EACA,cAAc,CAAC,IAAf,CAAoB,yBAApB;EACA,cAAc,CAAC,IAAf,CAAoB,yBAApB;EACA,cAAc,CAAC,IAAf,CAAoB,wBAApB;SACA,WAAA,CAAY,CAAC,QAAA,CAAA,CAAA;WAAG,cAAc,CAAC,IAAf,CAAoB,GAApB;EAAH,CAAD,CAAZ,EAA0C,EAAA,GAAG,IAA7C;AARsB;;AAUxB,cAAc,CAAC,SAAf,GAA2B,QAAA,CAAC,CAAC,IAAD,CAAD,CAAA;AACzB,MAAA,OAAA,EAAA;EAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,cAAX;EACP,IAAG,IAAH;IACE,CAAC,IAAD,EAAO,OAAP,CAAA,GAAkB,IAAI,CAAC,KAAL,CAAW,IAAK,CAAA,CAAA,CAAhB;IAClB,IAAG,IAAA,KAAQ,IAAX;aACE,MAAA,CAAO,KAAP,EACE;QAAA,MAAA,EAAQ,OAAO,CAAC,QAAhB;QACA,GAAA,EAAK,CADL;QAEA,IAAA,EAAM,OAAO,CAAC,IAFd;QAGA,UAAA,EAAY,OAAO,CAAC,IAAI,CAAC,GAAb,CAAiB,QAAA,CAAC,KAAD,CAAA;iBAAW,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAmB,CAAA,CAAA;QAA9B,CAAjB;MAHZ,CADF,EADF;KAAA,MAAA;aAOE,SAAA,CAAU,KAAV,EAAiB,OAAjB,EAPF;KAFF;;AAFyB,EA5B3B;;;AA0CA,aAAA,GAAgB,IAAI,SAAJ,CAAc,8BAAd;;AAChB,aAAa,CAAC,MAAd,GAAuB,QAAA,CAAA,CAAA;EACrB,aAAa,CAAC,IAAd,CAAmB,IAAI,CAAC,SAAL,CAAe;IAAA,EAAA,EAAI;EAAJ,CAAf,CAAnB;SACA,aAAa,CAAC,IAAd,CAAmB,IAAI,CAAC,SAAL,CAAe;IAAA,EAAA,EAAI;EAAJ,CAAf,CAAnB;AAFqB;;AAGvB,aAAa,CAAC,SAAd,GAA0B,QAAA,CAAC,CAAC,IAAD,CAAD,CAAA;AACxB,MAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA;EAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;EACP,IAAG,IAAI,CAAC,EAAL,KAAW,KAAd;IACE,GAAA,GAAM;IACN,MAAA,GAAS;IACT,KAAA,GAAQ;AACR;IAAA,KAAA,qCAAA;;MAAA,KAAA,IAAS,KAAK,CAAC,QAAQ,CAAC,KAAf,GAAqB;IAA9B;AACA;IAAA,KAAA,wCAAA;;MAAA,MAAA,IAAU,MAAM,CAAC,KAAP,GAAa;IAAvB;IACA,GAAA,GAAM,IAAI,CAAC,GAAL,CAAS,KAAA,GAAQ,MAAjB,EAAyB,CAAzB;WACN,MAAA,CAAO,KAAP,EACE;MAAA,MAAA,EAAQ,MAAR;MACA,GAAA,EAAK,GADL;MAEA,UAAA,EAAY,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAX,CAAe,QAAA,CAAC,GAAD,CAAA;eAAS,CAAC,GAAG,CAAC,IAAL,EAAW,GAAG,CAAC,KAAJ,GAAU,SAArB;MAAT,CAAf;IAFZ,CADF,EAPF;GAAA,MAAA;WAYE,SAAA,CAAU,KAAV,EAAiB,IAAI,CAAC,CAAtB,EAZF;;AAFwB,EA9C1B;;;AA+DA,UAAA,GAAa,IAAI,SAAJ,CAAc,0DAAd;;AACb,UAAU,CAAC,MAAX,GAAoB,QAAA,CAAA,CAAA;SAClB,WAAA,CAAY,CAAC,QAAA,CAAA,CAAA;WAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB;EAAH,CAAD,CAAZ,EAAsC,EAAA,GAAG,IAAzC;AADkB;;AAEpB,UAAU,CAAC,SAAX,GAAuB,QAAA,CAAC,CAAC,IAAD,CAAD,CAAA;AACrB,MAAA,OAAA,EAAA;EAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,cAAX;EACP,IAAG,IAAH;IACE,CAAC,IAAD,EAAO,OAAP,CAAA,GAAkB,IAAI,CAAC,KAAL,CAAW,IAAK,CAAA,CAAA,CAAhB;IAClB,IAAG,IAAA,KAAQ,OAAX;aACE,MAAA,CAAO,KAAP,EAAc;QAAC,MAAA,EAAQ,OAAO,CAAC,MAAR,GAAiB,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,EAAb,CAA1B;QAA4C,GAAA,EAAK,CAAjD;QAAoD,IAAA,EAAM,OAAO,CAAC;MAAlE,CAAd,EADF;KAFF;;AAFqB,EAlEvB;;;AA0EA,WAAA,GAAc,IAAI,SAAJ,CAAc,gCAAd;;AACd,WAAW,CAAC,SAAZ,GAAwB,QAAA,CAAC,CAAC,IAAD,CAAD,CAAA;EACtB,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;EACP,IAAG,IAAI,CAAC,IAAL,KAAa,IAAhB;WACE,MAAA,CAAO,KAAP,EAAc;MAAC,MAAA,EAAQ,IAAI,CAAC,MAAd;MAAsB,GAAA,EAAK,IAAI,CAAC,GAAhC;MAAqC,IAAA,EAAM,IAAI,CAAC;IAAhD,CAAd,EADF;GAAA,MAAA;WAGE,SAAA,CAAU,KAAV,EAAiB,IAAjB,EAHF;;AAFsB,EA3ExB;;;;;AAqFA,KAAA,GAAQ,CAAA;;AAER,MAAA,GAAS,QAAA,CAAC,QAAD,EAAW,EAAX,CAAA;AACP,MAAA,GAAA,EAAA;EAAA,KAAA,GAAQ,EAAE,CAAC,MAAH,GAAU,MAAO,CAAA,QAAA;EACzB,GAAA,GAAM,EAAE,CAAC,GAAH,GAAO,MAAO,CAAA,QAAA;SAEpB,KAAM,CAAA,QAAA,CAAS,CAAC,SAAhB,CACE;IAAA,KAAA,EAAU,GAAH,GAAY,CAAA,GAAI,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,KAAL,CAAW,CAAA,GAAE,GAAb,CAAZ,CAAJ,GAAmC,CAAnD,GAA0D,CAAjE;IACA,GAAA,EAAQ,KAAH,GAAc,GAAA,GAAM,GAAA,GAAM,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,KAAL,CAAW,CAAA,GAAE,KAAb,CAAZ,CAAN,GAAuC,CAA3D,GAAkE,GADvE;IAEA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,KAAL,CAAW,CAAA,GAAE,KAAb,CAAA,GAAsB,EAAlC,CAFX;IAGA,MAAA,EAAQ,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,KAAL,CAAW,CAAA,GAAI,GAAf,CAAZ,CAAA,GAAiC,CAAjC,GAAqC;EAH7C,CADF;AAJO;;AAUT,SAAA,GAAY,QAAA,CAAC,QAAD,CAAA;SACV,KAAM,CAAA,QAAA,CAAS,CAAC,QAAhB,CAAA;AADU;;AAGZ,CAAA,CAAE,QAAA,CAAA,CAAA;EACA,YAAA,CAAA;SACA,CAAA,CAAE,mBAAF,CAAsB,CAAC,IAAvB,CAA4B,QAAA,CAAA,CAAA;AAC1B,QAAA,MAAA,EAAA;IAAA,QAAA,GAAW,CAAA,CAAE,IAAF,CAAI,CAAC,IAAL,CAAU,OAAV;IACX,MAAA,GAAS,CAAA,CAAE,mBAAF;IACT,CAAA,CAAE,GAAA,GAAI,QAAN,CAAe,CAAC,MAAhB,CAAuB,MAAvB;WACA,KAAM,CAAA,QAAA,CAAN,GAAkB,IAAI,cAAJ,CAAmB,MAAM,CAAC,GAAP,CAAW,CAAX,CAAnB;EAJQ,CAA5B;AAFA,CAAF",
  "sourcesContent": [
    "currencies = ['btc', 'eth', 'ltc', 'xrb']\nprices = {}\n\n# get current price\nupdatePrices = ->\n  currencyAPI = 'https://min-api.cryptocompare.com/data/price?fsym=USD&tsyms='\n  $.get currencyAPI + currencies.join(',').toUpperCase(), (data) ->\n    if data\n      for currency, price of data\n        currency = currency.toLowerCase()\n        prices[currency] = Math.round(1/price*100)/100\n        $('.'+currency+' .price').text prices[currency]\n\n  setTimeout updatePrices, 10*1000\n\n# litecoin live feed\nlitecoinSocket = new WebSocket \"wss://insight.litecore.io/socket.io/?EIO=3&transport=websocket\"\n\nlitecoinSocket.onopen = ->\n  litecoinSocket.send '2probe'\n  litecoinSocket.send '5'\n  litecoinSocket.send '420[\"subscribe\",\"sync\"]'\n  litecoinSocket.send '421[\"subscribe\",\"inv\"]'\n  litecoinSocket.send '422[\"subscribe\",\"sync\"]'\n  litecoinSocket.send '424[\"subscribe\",\"sync\"]'\n  litecoinSocket.send '425[\"subscribe\",\"inv\"]'\n  setInterval (-> litecoinSocket.send '2'), 25*1000\n\nlitecoinSocket.onmessage = ({data}) ->\n  data = data.match /^\\d+(\\[.+?)$/\n  if data\n    [type, payload] = JSON.parse(data[1])\n    if type is 'tx'\n      showTx 'ltc',\n        amount: payload.valueOut\n        fee: 0\n        hash: payload.txid\n        recipients: payload.vout.map (value) -> Object.keys(value)[0]\n    else\n      showBlock 'ltc', payload\n\n# bitcoin live feed\nbitcoinSocket = new WebSocket \"wss://ws.blockchain.info/inv\"\nbitcoinSocket.onopen = ->\n  bitcoinSocket.send JSON.stringify op: 'unconfirmed_sub'\n  bitcoinSocket.send JSON.stringify op: 'blocks_sub'\nbitcoinSocket.onmessage = ({data}) ->\n  data = JSON.parse data\n  if data.op is 'utx'\n    fee = 0\n    valOut = 0\n    valIn = 0\n    valIn += input.prev_out.value/100000000 for input in data.x.inputs\n    valOut += output.value/100000000 for output in data.x.out\n    fee = Math.max valIn - valOut, 0\n    showTx 'btc',\n      amount: valOut\n      fee: fee\n      recipients: data.x.out.map (out) -> [out.addr, out.value/100000000]\n  else\n    showBlock 'btc', data.x\n\n# nano live feed\nnanoSocket = new WebSocket \"wss://www.nanode.co/socket.io/?EIO=3&transport=websocket\"\nnanoSocket.onopen = ->\n  setInterval (-> nanoSocket.send '2'), 25*1000\nnanoSocket.onmessage = ({data}) ->\n  data = data.match /^\\d+(\\[.+?)$/\n  if data\n    [type, payload] = JSON.parse(data[1])\n    if type is 'block'\n      showTx 'xrb', {amount: payload.amount / Math.pow(10, 30), fee: 0, hash: payload.hash}\n\n# ether live feed\netherSocket = new WebSocket \"ws://ethersocket.herokuapp.com\"\netherSocket.onmessage = ({data}) ->\n  data = JSON.parse data\n  if data.type is 'tx'\n    showTx 'eth', {amount: data.ethers, fee: data.fee, hash: data.hash}\n  else\n    showBlock 'eth', data\n\n#################\n### rendering ###\n#################\nlanes = {}\n\nshowTx = (currency, tx) ->\n  price = tx.amount*prices[currency]\n  fee = tx.fee*prices[currency]\n\n  lanes[currency].addMeteor\n    speed: if fee then 2 + 4 * Math.min(2, Math.log10(1+fee))/2 else 6\n    hue: if price then 220 - 220 * Math.min(6, Math.log10(1+price))/6 else 220\n    thickness: Math.max(5, Math.log10(1+price) * 10)\n    length: Math.min(3, Math.log10(1 + fee))/3 * 250\n\nshowBlock = (currency) ->\n  lanes[currency].addBlock()\n\n$ ->\n  updatePrices()\n  $('.currencies > div').each ->\n    currency = $(@).attr 'class'\n    canvas = $ '<canvas></canvas>'\n    $('.'+currency).append canvas\n    lanes[currency] = new CanvasRenderer canvas.get(0)"
  ]
}