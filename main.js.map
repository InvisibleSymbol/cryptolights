{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "",
  "sources": [
    "main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "currencies = ['btc', 'eth', 'ltc', 'xrb']\nprices = {}\n\n# get current price\ndo updatePrices = ->\n  currencyAPI = 'https://min-api.cryptocompare.com/data/price?fsym=USD&tsyms='\n  $.get currencyAPI + currencies.join(',').toUpperCase(), (data) ->\n    if data\n      for currency, price of data\n        currency = currency.toLowerCase()\n        prices[currency] = Math.round(1/price*100)/100\n        $('.'+currency+' .price').text prices[currency]\n\n  setTimeout updatePrices, 10*1000\n\n# litecoin live feed\nlitecoinSocket = new WebSocket \"wss://insight.litecore.io/socket.io/?EIO=3&transport=websocket\"\n\nlitecoinSocket.onopen = ->\n  litecoinSocket.send '2probe'\n  litecoinSocket.send '5'\n  litecoinSocket.send '420[\"subscribe\",\"sync\"]'\n  litecoinSocket.send '421[\"subscribe\",\"inv\"]'\n  litecoinSocket.send '422[\"subscribe\",\"sync\"]'\n  litecoinSocket.send '424[\"subscribe\",\"sync\"]'\n  litecoinSocket.send '425[\"subscribe\",\"inv\"]'\n  setInterval (-> litecoinSocket.send '2'), 25*1000\n\nlitecoinSocket.onmessage = ({data}) ->\n  data = data.match /^\\d+(\\[.+?)$/\n  if data\n    [type, payload] = JSON.parse(data[1])\n    if type is 'tx'\n      showTx 'ltc',\n        amount: payload.valueOut\n        fee: 0\n        hash: payload.txid\n        recipients: payload.vout.map (value) -> Object.keys(value)[0]\n    else\n      showBlock 'ltc', payload\n\n# bitcoin live feed\nbitcoinSocket = new WebSocket \"wss://ws.blockchain.info/inv\"\nbitcoinSocket.onopen = ->\n  bitcoinSocket.send JSON.stringify op: 'unconfirmed_sub'\n  bitcoinSocket.send JSON.stringify op: 'blocks_sub'\nbitcoinSocket.onmessage = ({data}) ->\n  data = JSON.parse data\n  if data.op is 'utx'\n    fee = 0\n    valOut = 0\n    valIn = 0\n    valIn += input.prev_out.value/100000000 for input in data.x.inputs\n    valOut += output.value/100000000 for output in data.x.out\n    fee = Math.max valIn - valOut, 0\n    showTx 'btc',\n      amount: valOut\n      fee: fee\n      recipients: data.x.out.map (out) -> [out.addr, out.value/100000000]\n\n  else\n    showBlock 'btc', data.x\n\n# nano live feed\nnanoSocket = new WebSocket \"wss://www.nanode.co/socket.io/?EIO=3&transport=websocket\"\nnanoSocket.onopen = ->\n  setInterval (-> nanoSocket.send '2'), 25*1000\nnanoSocket.onmessage = ({data}) ->\n  data = data.match /^\\d+(\\[.+?)$/\n  if data\n    [type, payload] = JSON.parse(data[1])\n    if type is 'block'\n      showTx 'xrb', {amount: payload.amount / Math.pow(10, 30), fee: 0, hash: payload.hash}\n\n# ether live feed\n#etherSocket = new WebSocket \"ws://ethersocket.herokuapp.com\"\n#etherSocket.onmessage = ({data}) ->\n#  data = JSON.parse data\n#  if data.type is 'tx'\n#    showTx 'eth', {amount: data.ethers, fee: data.fee, hash: data.hash}\n#  else\n#    showBlock 'eth', data\n\n####################\n### calculations ###\n####################\ncalculateWidth = (price) ->\n  Math.log10(1+price) * 10\n\ncalculateHeight = (fee) ->\n  Math.min(3, Math.log10(1 + fee))/3 * 200\n\ncalculateColor = (price) ->\n  percent = Math.min(6, Math.log10(1+price))/6\n  start = [0, 0, 255]\n  end = [255, 0, 0]\n  result = [\n    start[0] + percent * (end[0] - start[0])\n    start[1] + percent * (end[1] - start[1])\n    start[2] + percent * (end[2] - start[2])\n  ]\n  '#'+result.map((c) -> ('0'+Math.round(c).toString(16)).substr(-2)).join('')\n\ncalculateDuration = (fee) ->\n  if fee then 6000 - Math.round(3000 * Math.min(2, Math.log10(1+fee))/2) else 3000\n\n#################\n### rendering ###\n#################\nshowTx = (currency, tx) ->\n  dot = $ '<div></div>'\n  price = tx.amount*prices[currency]\n  fee = tx.fee*prices[currency]\n  size = calculateWidth(price)\n  dot.css\n    width: size + 'px'\n    height: size + 'px'\n    backgroundColor: calculateColor(price)\n    animationDuration: calculateDuration(fee) + 'ms'\n    marginLeft: -1 * size / 2 + 'px'\n    left: Math.random()*100 +'%'\n  $('.'+currency+' .dots').append dot\n  if tx.fee\n    trail = $ '<span></span>'\n#    trail.text Math.round(tx.fee * prices[currency]*10)/10\n    trail.css\n      height: calculateHeight(fee) + 'px'\n    dot.append trail\n  setTimeout (-> dot.remove()), calculateDuration(fee)\n#  console.log 'tx', currency, tx\n\nshowBlock = (currency, block) ->\n  console.log block\n  block = $ '<p></p>'\n  $('.'+currency+' .dots').append block\n  setTimeout (-> block.remove()), 5000\n"
  ]
}