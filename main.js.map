{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "",
  "sources": [
    "main.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,aAAA,EAAA,UAAA,EAAA,SAAA,EAAA;;EACA,aAAA,GAAgB,IAAI,SAAJ,CAAc,8BAAd;;EAChB,aAAa,CAAC,MAAd,GAAuB,QAAA,CAAA,CAAA;IACrB,aAAa,CAAC,IAAd,CAAmB,IAAI,CAAC,SAAL,CAAe;MAAA,EAAA,EAAI;IAAJ,CAAf,CAAnB;WACA,aAAa,CAAC,IAAd,CAAmB,IAAI,CAAC,SAAL,CAAe;MAAA,EAAA,EAAI;IAAJ,CAAf,CAAnB;EAFqB;;EAGvB,aAAa,CAAC,SAAd,GAA0B,QAAA,CAAC,CAAC,IAAD,CAAD,CAAA;AACxB,QAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA;IAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;IACP,IAAG,IAAI,CAAC,EAAL,KAAW,KAAd;MACE,GAAA,GAAM;MACN,MAAA,GAAS;MACT,KAAA,GAAQ;AACR;MAAA,KAAA,qCAAA;;QAAA,KAAA,IAAS,KAAK,CAAC,QAAQ,CAAC,KAAf,GAAqB;MAA9B;AACA;MAAA,KAAA,wCAAA;;QAAA,MAAA,IAAU,MAAM,CAAC,KAAP,GAAa;MAAvB;MACA,GAAA,GAAM,IAAI,CAAC,GAAL,CAAS,KAAA,GAAQ,MAAjB,EAAyB,CAAzB;aACN,MAAA,CAAO,KAAP,EAAc;QAAE,MAAA,EAAQ,MAAV;QAAkB,GAAlB;QAAuB,IAAA,EAAM,IAAI,CAAC,CAAC,CAAC;MAApC,CAAd,EAPF;KAAA,MAAA;aASE,SAAA,CAAU,KAAV,EAAiB,IAAI,CAAC,CAAtB,EATF;;EAFwB,EAL1B;;;EAmBA,UAAA,GAAa,IAAI,SAAJ,CAAc,0DAAd;;EACb,UAAU,CAAC,MAAX,GAAoB,QAAA,CAAA,CAAA;WAClB,UAAU,CAAC,IAAX,CAAgB,GAAhB;EADkB;;EAEpB,UAAU,CAAC,SAAX,GAAuB,QAAA,CAAC,CAAC,IAAD,CAAD,CAAA;AACrB,QAAA,OAAA,EAAA;IAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,cAAX;IACP,IAAG,IAAH;MACE,CAAC,IAAD,EAAO,OAAP,CAAA,GAAkB,IAAI,CAAC,KAAL,CAAW,IAAK,CAAA,CAAA,CAAhB;MAClB,IAAG,IAAA,KAAQ,OAAX;eACE,MAAA,CAAO,MAAP,EAAe;UAAC,MAAA,EAAQ,OAAO,CAAC,MAAR,GAAiB,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,EAAb,CAA1B;UAA4C,GAAA,EAAK,CAAjD;UAAoD,IAAA,EAAM,OAAO,CAAC;QAAlE,CAAf,EADF;OAFF;;EAFqB,EAtBvB;;;;;;;;;;EAuCA,MAAA,GAAS,QAAA,CAAC,OAAD,EAAU,EAAV,CAAA;WACP,OAAO,CAAC,GAAR,CAAY,IAAZ,EAAkB,OAAlB,EAA2B,EAA3B;EADO;;EAGT,SAAA,GAAY,QAAA,CAAC,OAAD,EAAU,KAAV,CAAA;WACV,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,OAArB,EAA8B,KAA9B;EADU;AA1CZ",
  "sourcesContent": [
    "# bitcoin live feed\nbitcoinSocket = new WebSocket \"wss://ws.blockchain.info/inv\"\nbitcoinSocket.onopen = ->\n  bitcoinSocket.send JSON.stringify op: 'unconfirmed_sub'\n  bitcoinSocket.send JSON.stringify op: 'blocks_sub'\nbitcoinSocket.onmessage = ({data}) ->\n  data = JSON.parse data\n  if data.op is 'utx'\n    fee = 0\n    valOut = 0\n    valIn = 0\n    valIn += input.prev_out.value/100000000 for input in data.x.inputs\n    valOut += output.value/100000000 for output in data.x.out\n    fee = Math.max valIn - valOut, 0\n    showTx 'btc', { amount: valOut, fee, hash: data.x.hash }\n  else\n    showBlock 'btc', data.x\n\n# nano live feed\nnanoSocket = new WebSocket \"wss://www.nanode.co/socket.io/?EIO=3&transport=websocket\"\nnanoSocket.onopen = ->\n  nanoSocket.send '2'\nnanoSocket.onmessage = ({data}) ->\n  data = data.match /^\\d+(\\[.+?)$/\n  if data\n    [type, payload] = JSON.parse(data[1])\n    if type is 'block'\n      showTx 'nano', {amount: payload.amount / Math.pow(10, 30), fee: 0, hash: payload.hash}\n\n# ether live feed\n#etherSocket = new WebSocket \"ws://ethersocket.herokuapp.com\"\n#etherSocket.onmessage = ({data}) ->\n#  data = JSON.parse data\n#  if data.type is 'tx'\n#    showTx 'ethereum', {amount: data.ethers, fee: data.fee, hash: data.hash}\n#  else\n#    showBlock 'ethereum', data\n\n\nshowTx = (network, tx) ->\n  console.log 'tx', network, tx\n\nshowBlock = (network, block) ->\n  console.log 'block', network, block"
  ]
}